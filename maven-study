## 1.Maven聚合

####1.父子项目聚合

1. 父类项目中处于子类项目的上一级目录 父类可以设置modules 如果不是子类的上一级目录，则需指定路径

**主要为了解决快速构建项目的问题，指定完成之后打包父类项目，所有的子类项目都会被打包**



#### 2.子类pom继承父类pom

1. 父类的dependcyManagent 声名版本号  子类dependcy明确调用

2. 父类的dependcy pom 子类可以继承不用重复定义

3. 父类的绝大多数属性，子类都会继承

4. 子类如果需要继承父类pom则必须申明parent标签

5. 如果父类项目不在子类项目的上一级，那么需要指定在parent标签中指定relativePath

	默认值为../pom.xml

	查找顺序：relativePath元素中的地址–本地仓库–远程仓库.如果找到了的话，那么不会从远程找了。

6. 

**主要为了解决依赖的问题**



####3. maven中的继承和聚合的关系：

两者的目的是不一样的，聚合的目的是能够快速的构建项目，继承的目的是减少重复配置。

1. 聚合：
	定义一个聚合模块，然后在pom文件中添加<module></module>标签，其中的内容是模块相对于当前模块的路径。那么在构建聚合模块的时候，在<module>中定义的模块也会跟着构建，不用逐个构建，因此加快了构建速度.
2. 继承：
	除了定义一个父模块，在父模块的pom文件中添加<module>标签，还要在子模块pom文件中添加<parent>标签，指向父模块。指向之后，那么在父模块中定义的插件和依赖都可以被子模块继承，就不用再子模块pom文件中重复配置了（减少了重复配置）。
	注：无论是聚合还是继承，父模块的pom文件中的<packageing>的内容都是pom，（这是乌龟的屁股，规定）。如果不写的话，默认的都是jar。

 


还有一个问题就是，在父模块定义了很多依赖，但是某一个模块并没有全部用到，那么子模块还是会全部继承过来。比较浪费。
所以可以使用依赖管理标签<dependencyManagement>
在父模块的pom文件中的<dependencyManagement></dependencyManagement>定义了所有需要依赖的jar包，但是这样子模块并不会引入这些jar包。子模块中需要哪些jar包就在自身pom文件的<dependency>标签中引入就可以了，因为父模块的pom文件中已经定义过了，子模块的pom文件只需定义出<groupId>和<artifactId>就可以了。

















1.mvn help:effective-pom  显示super-pom.xml 配置
2.mvn package -DskipTests     不执行test下的测试用例但生成相应test.class
3.mvn package -Dmaven.test.skip=true  不执行test下的测试用例也不生成相应test.class
4.maven项目中pom.xml正确 但无maven dependcies libraries
设置项目.classpath文件 添加
<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
5.

6.dependcy scope作用：
分类说明
compile
默认scope为compile，表示为当前依赖参与项目的编译、测试和运行阶段，属于强依赖。打包之时，会达到包里去。
test
该依赖仅仅参与测试相关的内容，包括测试用例的编译和执行，比如定性的Junit。
runtime
依赖仅参与运行周期中的使用。一般这种类库都是接口与实现相分离的类库，比如JDBC类库，在编译之时仅依赖相关的接口，在具体的运行之时，才需要具体的mysql、oracle等等数据的驱动程序。
此类的驱动都是为runtime的类库。
provided
该依赖在打包过程中，不需要打进去，这个由运行的环境来提供，比如tomcat或者基础类库等等，事实上，该依赖可以参与编译、测试和运行等周期，与compile等同。区别在于打包阶段进行了exclude操作。
system
使用上与provided相同，不同之处在于该依赖不从maven仓库中提取，而是从本地文件系统中提取，其会参照systemPath的属性进行提取依赖。
import
这个是maven2.0.9版本后出的属性，import只能在dependencyManagement的中使用，能解决maven单继承问题，import依赖关系实际上并不参与限制依赖关系的传递性。

7.dependcyManagment jar包依赖管理 如果父类项目在managment 里写了版本 那么子类则继承父类 无需再写，如果子类写了，则实际引用版本以子类为准.
