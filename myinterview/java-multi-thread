#####1.notify() 和 notifyAll() 有什么区别？

notify()随机唤醒一个被wait()的线程.无法确定唤醒的是哪一个被wait()的线程.由JVM控制.

notifyAll()唤醒所有被wait()的线程.



##### 2.Java 如何实现多线程之间的通讯和协作？

1,synchronized代码块里面的wait()  notify() notifyAll()方法

<font color='red'>2.ReentrantLock类加锁的线程的Condition类的await()/signal()/signalAll() 线程间直接的数据交换</font>?

<font color='red'>3.通过管道进行线程间通信：1）字节流；2）字符流同步方法和同步块，哪个是更好的选择？</font>



##### 3.什么是线程同步和线程互斥，有哪几种实现方式？

<font color='red'> 线程同步:通过一定的逻辑来控制线程共同完成一个任务?</font>

线程互斥:  一次只有线程，对共享资源的访问一次只允许一个线程,线程同步的特殊形式.

<font color='red'> lock与unlock方法，替换synchronized，这就是互斥锁的体现。消费者生产者模式就是同步锁的体现。 </font>



##### 4.在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步

<font color='red'>在 java 虚拟机中，每个对象( Object 和 class )通过某种逻辑关联监视器,每个监视器和一个对象引用相关联，为了实现监视器的互斥功能，每个对象都关联着一把锁。</font>

<font color='red'>一旦方法或者代码块被 synchronized 修饰，那么这个部分就放入了监视器的</font>

<font color='red'>监视区域，确保一次只能有一个线程执行该部分的代码，线程在获取锁之前不允许执行该部分的代码</font>

<font color='red'>另外 java 还提供了显式监视器( Lock )和隐式监视器( synchronized )两种锁方案</font>







##### 5.如果你提交任务时，线程池队列已满，这时会发生什么

1，如果是无界队列（近似无穷大）的话,此是继续添加到等待队列

2，如果是有界队列的话，那么此时会开启非核心线程数执行队列的任务，如果达到最大线程数的话，此时执行拒绝策略





##### 6.JDK线程池拒绝策略模式是AbortPolicy 就是抛弃掉此任务



##### 7.SpringMvc/Servlet是单实例，多线程的，非线程安全，Stust是多实例多线程的，每个请求分配一个Action,请求完成后销毁，是线程安全的





##### 8.在 Java 程序中怎么保证多线程的运行安全？

1.对于要运行安全的代码采用Synchronized关键字，或者ReenTrantLock锁来进行同步

2.或者采用Atomic的类来进行原子性操作，进行运算



##### 9.你对线程优先级的理解是什么？

多线程并发执行，每个线程都处于Runnable状态，那么优先级高的线程可以优先获得CPU的执行权



##### 10.线程类的构造方法、静态块是被哪个线程调用的?

构造方法被此线程的创建线程调用

静态块在加载类时执行，只有创建此线程的线程才会加载该类，因此也是创建线程调用的



##### 11.Java 中怎么获取一份线程 dump 文件？你如何在 Java 中获取线程堆栈

1. jps -l 找出java进程的pid

2. top -p -H pid 找到此进程对应的众多线程号

3. jstack  pid 导出了当前java进程的线程栈dump日志  

4. 将top -pH的线程号转化为16进制 根据16进制在dump日志里查询，可以查询到指定线程的日志

	******

1. linux  kill -3 PID 停止进程，并且导出线程dump 日志  window  ctrl+break

##### 11.一个线程发生运行异常，会怎么样?,如何跟踪？

1. 发生异常没有被捕获时，线程会停止运行.

2. Thread.UncaughtExceptionHandler是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常将造成线程中断的时候，JVM 会使用 Thread.getUncaughtExceptionHandler()来查询线程的信息

	UncaughtExceptionHandler 并将线程和异常作为参数传递给 handler 的 uncaughtException()方法进行处理。

```java 
 Thread t1=new Thread(()->{
            System.out.println(Thread.currentThread().getName()+"执行.......");
            int i=12/0;
            System.out.println(Thread.currentThread().getName()+"异常后面代码.......");
        },"wzythread1");
        t1.setUncaughtExceptionHandler((t,e)->{
            Thread.UncaughtExceptionHandler un=Thread.currentThread().getUncaughtExceptionHandler();
            System.out.println("异常处理器是");
            System.out.println("线程未捕获的异常"+t.getName());
            System.out.println("线程未捕获的异常是");
            //e.printStackTrace();
            System.out.println("处理异常结束");

        });
        t1.start();
```



##### 12.Java 线程数过多会造成什么异常？

1. java线程数如果过多的话，可能造成栈的溢出，因为一个线程数就要开辟一个单独的线程栈 1MB
2. 还有可能导致CPU占用率过高。导致机器所有程序的卡顿。因为线程数过多，CPU需要不断切换，从而导致执行效率变低.

<font color='red'>降低稳定性JVM 在可创建线程的数量上存在一个限制，这个限制值将随着平台的不同而不同，并且承受着多个因素制约，包括 JVM 的启动参数、Thread 构造函数中请求栈的大小，以及底层操作系统对线程的限制等。如果破坏了这些限制，那么可能抛出OutOfMemoryError 异常。</font>



##### 13.Java中垃圾回收有什么目的？什么时候进行垃圾回收？

1. java垃圾回收可以回收没有引用的垃圾对象。释放内存空间。可以避免内存溢出，内存泄漏等问题。
2. 当一个对象没有被引用时，那么此对象就是垃圾对象。
3. 对于分代式垃圾回收器，当edon区满的时候回触发YGC，当S1或者S2满了的时候，将新生代所有存活对象移动至老年代.
4. 当老年代内存达到JVM设定的最大值时，也会出现FGC。
5. 程序员手动调用System.gc()方法时，也会调用.



##### 14.如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？

1. 不会立即。
2. 而是在下一次触发垃圾回收事件时才会被回收.



##### 15.finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？

1. 在垃圾回收器回收此对象时，该对象的finalize方法会被调用,先执行此方法，再回收此对象占用空间
2. GC本来就是内存回收了，应用还需要在finalization做什么呢？ 答案是大部分时候，什么都不用做(也就是不需要重载)。只有在某些很特殊的情况下，比如你调用了一些native的方法(一般是C写的)，可以要在finaliztion里去调用C的释放函数。



##### 16.重排序数据依赖性为什么代码会重排序?

1. 单线程下，具有数据依赖性的两条指令，并不会发生指令的重排序。
2. 单线程情况下，不改变程序执行的最终结果可以重新排序.
3. 多线程情况下，单线程的不改变程序执行的最终结果，可能影响多线程的执行结果.



##### 17.as-if-serial规则和happens-before规则的区别

<font color='red'>as-if-serial语义给编写单线程程序的程序员创造了一个幻境：单线程程序是按程序的顺序来执行的。happens-before关系给编写正确同步的多线程程序的程序员创造了一个幻境：正确同步的多线程程序是按 happens-before指定的顺序来执行的。</font>



##### 18.synchronized 的作用？

修饰方法，该方法一次只会允许一个线程通过

代码块 块中的内容，一次只会允许一个线程通过

为了多线程环境下控制线程的同步。



#####19.说说自己是怎么使用 synchronized 关键字，在项目中用到了吗

在多线程的情况下，控制线程共享数据的安全时。

1.使用synchronized代码块

2.synchronized修饰方法 

synchronized代码块中使用唯一对象作为锁。



##### 20.synchronized底层实现原理 ？

1.jdk1.6之前，完全是重量级锁。利用线程的Monitor监视器加内核系统的调度队列执行。

每次加锁，解锁。都需要大量时间用于内核态向用户态的转化。效率低下。

2.jdk1.6之后。jdk对其进行优化，当无竞争条件下的同步，可以使用偏向锁。当竞争条件较小使用自旋锁。当竞争压力较大使用重量级锁。有一个锁升级的过程.



##### 21.synchronized锁升级的过程.

1.无锁---------》偏向锁

1. 如果一个线程进入同步代码块，如果markword里面的偏向锁标志位可以，那么就可以进行偏向锁，否则直接进入轻量级锁.

2. 如果允许偏向锁，判断当前markword存储hashCode的是否指向是当前线程ID，如果是，锁可重入，继续执行代码.
3. 如果不是当前线程ID，CAS操作，将当前线程ID，赋值到当前hashCode,CAS成功，获得锁。失败，表示存在竞争条件。当前线程再持有偏向锁的线程到达安全点之后，撤销偏向锁，将锁对象的markword的线程ID，清空，升级转为轻量级锁。

**注意：**

**1.如果一个对象调用过hashCode或者System.identyHashCode,也就是生成过hashCode值，之后，那么次对象不能作为偏向锁对象 **

**2.如果处于偏向锁状态的对象，计算了hashCode值，那么会由偏向锁升级为自旋锁。**

****



2.偏向锁-------->轻量级锁

1. 如果存在竞争条件 ，当前线程首先把markword复制到线程栈帧的LockRecord中，并且尝试把markword里面的值CAS替换为当前线程栈帧LockRecord的地址。
2. 如果成功，设定锁的标志位为00，执行同步代码块。

3. 如果失败，再次自旋CAS替换当前线程栈帧的LockRecord的地址  到达一定次数后，膨胀为重量级锁，锁的标志为变为10，并且锁对象的markword变为monitor的指针
4. 还处于同步代码块的线程，再完成同步代码块之后,CAS 还原markword会失败。之后会进入等待，被唤醒时，重新使用重量级锁竞争。

 



3.轻量级锁-------》重量级锁

1. 重量级锁 entryset -------->monitor锁------>waitset
2. 对象的markword替换为monitor的指针 重入monitor的计数器加1
3. 如果线程进入睡眠，进入waitset队列。





##### 22.说说自己是怎么使用 synchronized 关键字，在项目中用到了吗

synchronized 同步方法  静态方法（锁当前类的字节码对象）  实例方法（this 当前实例对象）

synchronize 同步代码块(锁对象)



##### 23.DCL单例模式

对象的创建过程不是原子性的分为3步

1.为对象开辟内存空间

2.初始化对象

3.将变量指向对象的内存地址

实际过成CPU乱序执行，可能是 1---------》3------------》2

单线程情况下，没有问题。多线程情况下 如果3先执行，那么第2个线程正好进入是否等于null的判断，那么对象未初始化是个空对象。会导致线程2业务的报错。



解决方案：对单例对象加volatile  静止指令的重排序。



##### 24.volatile关键字的作用

1.保证内存的可见性。MESI 协议 利用CPU的嗅探机制 lock指令 保证数据读取 修改在每个线程内能真正及时同步到。

2.设置内存屏障，防止CPU指令的重排序。 

volatile 修饰的变量  volatile读 load指令从主内存拿，volatile写 store指令，将值，写入主存

volatile读后面:    普通写，volateile写必须在此操作后面。LoadStoreBarrier.  普通读必须在此操作后面  StoreStoreBarrier

volatile 写前面：普通写，volatile写必须先完成,StoreStoreBarrier.

volatile 写后面:普通读，volatile读必须在此操作后面  StoreLoadBarrier

![img](https://img2020.cnblogs.com/blog/1405595/202004/1405595-20200419153143481-487317979.png)



##### 25.Lock相对于 Synchronized的优势？

1. 不是同步代码块，用起来 相对灵活，可以跨方法比如。
2. 不仅有非公平锁，还提供了公平锁。功能更加丰富
3. 设有条件等待队列，可以通过ConitionObject await signal方法来完成线程之间的通信。
4. tryLock 方法提供了乐观锁的一种实现。而synchronized只能是悲观锁。
5. lockInterruptity可以让线程在获取锁的过程中，响应中断。抛出异常,快速失败.



##### 26.CAS会产生什么问题?

1. ABA问题 一个线程把预期值修改为另一个值，之后又马上修改还原回来为预期值。导致另一个线程CAS的操作，依然能成功。但是实际值已被修改。 

	解决方案：这是版本号。每次修改 版本号自增。每次CAS比较版本号。版本号预期值符合才修改。 比如AtomicStampReference

2. 高并发情况，大量CAS失败，占用CPU利用率。

3. 无法对多个变量完成CAS原子操作



##### 27.什么是死锁？

线程A占有独占锁1，线程A尝试获取独占锁2.

线程B占有独占锁2，线程B尝试获取独占锁1.

两个线程互相持有对方对方需要的锁，造成死锁。阻塞。



##### 28.死锁的互斥必要条件?

<font color='yellow'>1.互斥条件：一个资源只能同时被一个线程持有。</font>

<font color='yellow'>2.请求与保持条件：一个线程因为抢占资源而阻塞时，对已占有的资源保持不放。</font>

<font color='yellow'>3.不剥夺条件：线程在占用资源期间，其他线程不能抢占已被占用的资源。</font>

<font color='yellow'>4.循环等待条件：发生死锁时，所有等待的线程形成一个环路。类似死循环。造成永久阻塞。</font>



##### 29.如何避免死锁？

<font color='yellow'>1.破坏互斥条件：锁时独占锁，改为共享锁。</font>

<font color='yellow'>2.破坏请求与保持条件：一次性释放所有资源</font>

<font color='yellow'>3.破坏不剥夺条件：因为抢占资源而阻塞时，释放已占有的资源。</font>

<font color='yellow'>4.破坏循环等待条件：按顺序申请资源，释放资源，按反序释放。</font>





##### 30.线程的生命状态

1. Runnable 线程处于就绪状态，可以被CPU分配时间片执行。 start
2. Running  线程被CPU执行。 处于运行状态。可以通过Thred.yield 让其回归Runnable状态
3. 有时间的阻塞 Thread.sleep 到了时间 被唤醒回归Runnable状态  
4. 无时间的阻塞 object.wait  如果被Notify被唤醒，回归Runnable状态。
5. destory 线程正常执行完被销毁，或者被Thread.stop 强制停止。或者异常退出。





##### 31.线程的阻塞状态

1.等待阻塞，对象的wait方法 JVM放入waitingquue等待队列当中。

2.同步阻塞 synchronized 竞争锁失败。会放入内核的线程互斥量队列。

3.其他阻塞  Thread.sleep. .





##### 32.sleep和wait的区别



sleep 不会释放锁，wait会释放锁。

sleep用于线程暂停执行，wait用于线程相互通信。

sleep线程再睡眠指定时间后会自动唤醒，wait线程除非调用 notify方法。否则不会醒



##### 33.interrupted方法和isInterruped方法

interrupted 返回线程的中断状态，并且清除线程的中断标志。

isinterrupted 判断线程是否被中断。





##### 34.如何实现多线程的通信协作？

经典的生产者，消费者模型。

生产者往队列中放商品。如果队列满了。然生产者线程睡眠。并且唤醒消费者线程。消费者线程取商品。如过队列空了。消费者线程睡眠。唤醒生产者线程。



实现模式 ReenTrantLock  ConditionObject  await signal



##### 35.如果你提交任务时，线程池队列任务满了会发生什么？

1.队列满了，会判断核心线程数，是否超过了最大线程数，如果没有，创建非核心线程执行任务。

2.如果达到了，那么启动线程池的拒绝策略。



##### 36.ReenTrantLock  实现原理?

AQS 

lock 公平锁的实现，方法 尝试获取锁资源state,如果成功，直接进行业务代码。否则进入同步等待队列。如果队列不存在，先CAS初始化一个队列。成功之后，初始化一个属性为当前线程的Node节点。CAS放入队列的TAIL属性上，之后循环判断，当前线程节点的前一个节点，如果是Head并且能成功获取锁的话，直接CAS放入队列的HEAD属性上，否则的话，设置Head节点的state为-1.之后再次尝试获取锁。第二次循环 如果成功直接获取锁。跟上一步重复。否侧的话进入Lock.Park。



unlock方法 CAS不断减去当前线程重入锁的次数。并且如果存在AQS同步等待队列的话，唤醒AQS的head节点的下一个节点。



##### **<font color='yellow'> 37.ReadWriteReentLock 实现原理?</font>**









##### 38.公平锁，非公平锁的区别

公平锁：按访问锁资源的先后顺序，来依次占有锁。

非公平锁：不安访问锁资源的先后顺序，直接竞争，每个来竞争的线程都有获得CPU执行权的机会。





#####39.Condition源码分析与等待通知机制

Condition 创建一个条件等待队列，await方法，

1.创建一个Node放入条件队列当中。

2.释放当前线程的锁资源，唤醒AQS同步队列的下一个节点。

3.循环判断当前线程是否还在AQS同步队列当中。如果不在的话，进入循环体，直接Lock.park当前线程。否则的话

直接跳过。

4.从Lock.park唤醒 检测睡眠期间是否被Interrupt,没有被打断直接返回0，否则判断打断时间点，判断依据：

如果此条件节点的状态CAS失败，那么被中断。将此节点。重新加入同步队列当中去

如果此条件节点的状态CAS成功，那么没有被中断，也会重新加入同步队列当中去。

5.如果是THROW_IE的话，直接抛出被打断异常。 比如在await期间 sign之前被打断 导致苏醒。

6.如果是RERUPOT重新设置自身的打断状态。 在sign方法执行之后被打断。





signal方法

1.将条件等待队列的节点重新加入AQS同步队列，

2.CAS修改这个节点的状态为0.

3.LockSupport.unpark绑定条件节点的线程。







##### 40.ConcurrentHshMAP 如何保持同步的？

1.8 之前  

segment 每个segment对象中有HashEntry数组。 使用ReenTrantLock给每个segment的put方法上锁。



1.8之后 

cas+syn同步块。

put不涉及扩容时，对hash冲突的元素的put 使用syn代码块 同步。

put如果涉及扩容，并且有多线程调用put方法，那么会多线程并发转移元素到新的数组上。

1.确定步长最小16 .每个线程转移16个元素到新的数组当中。如果当前线程任务完了，还有任务的话，那么继续。

2.转移过程，将数组元素设置为Forwarding对象它的 hash值为-1代表数组正在扩容。此时如果有别的线程刚好往此位置put元素的话，那么进入helpTransfer方法，帮助扩容。

3.分高低位 转移元素到新数组当中。



##### 41.ThreadLocal实现

线程本地私有空间，不同线程相互隔离的。

1.本质Thread对象内部有一个ThreadLocalMap 它有一个Entry数组，它的key是ThreadLocal  value是用户调用ThreadLocal  set方法塞入的值。

2.因为每一个线程对象内部独立，所以线程安全。

3.它的key继承了weakReference 弱引用。一旦发生GC 它的key就会被回收变为Null了，因此有可能发生内存泄漏问题。

4.调用它的get set  removeThreadLocalMap 都会把key为null的元素，都清除。但是entry对象还有被清除，因此需要rm,及时清除key为Null的entry元素，防止内存泄漏。

5.工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。所以任务接收，要及时清理



##### 42.线程池的状态

1.RUNNING     111

线程池处于正在运行的状态



2.SHUTDOWN   000

线程池不再接收新的任务，但是会处理队列中已有的任务。也会执行线程正在进行的任务。

RUNNING状态的线程池调用shutdown 方法，线程池会进入此状态。



3.STOP   001

线程池不再接收新的任务，并且也不会处理队列中已有的任务。对正在进行的任务的线程执行打断操作。

SHUTDOwn状态的线程池调用ShutDownNow 方法 线程池会进入此状态。



4.Tiding  010

线程池的 记录的线程数为0

之后会回调线程池的Terminated方法

SHUTDOWN 队列任务为空，正在执行的任务也被执行完。

STOP队列任务为空，正在执行的任务也被中断。



5.Terminted 011

线程池进入Tiding状态回调 Terminated之后就会进入此种状态。





##### 43.线程池的拒绝策略

触发条件：队列满了，且线程数量达到最大线程数的设置

1.AbortPolicy

抛出异常。抛弃此任务。



2.DiscardOldestPlicy

抛弃队列中最早一条任务。加入新提交的任务



3.DiscardPolicy

不做任务处理，直接抛弃新任务



4.CallRunPolicy

交给当前提交任务的线程执行。







