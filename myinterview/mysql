#### 1.数据库三大范式

1. 每个列不可拆分
2. 在第一范式的基础上，非主键列都依赖与主键。去除不依赖主键的非主键列。(每个表只描述一件事情)
3. 在第二范式的基础上，非主键列不相互依赖。去除冗余字段。



#### 2.Mysql权限表

1. user 用户表 链接到服务器上用户密码信息
2. db权限表 各个账号在数据库的权限
3. table privilege 数据表级的操作权限
4. column  privilege 记录数据列级的操作权限
5. host 不限grant revoke语句
6. 



#### 3.mysql  binlog几种录入格式







#### 4.mysql innondb   myisam区别

1.   innodb所有表保存在一个文件  myisam存放3个文件 

2. innodb 对数据库提供ACID支持,并且还提供了行级锁和外键的约束,myisam不支持,myisam表级锁

3. innodb 需要更多的内存，磁盘 内存有缓冲区  mysisam 数据可被压缩

4. innodb select count() 需要查询索引树 myisam内部维护一个count计数器 相对较快

5. 两个索引结构都是B+树,mysiam支持Hash索引

6. 

	

#### 5.myisam索引innondb索引的区别

1. innodb的主键索引是聚簇索引(B+树叶子节点存放的是数据),myisam非聚簇索引(B+树叶子节点存放的不是数据，而是数据的指针),所以聚簇索引查找效率非常高，而非聚簇索引需要先查询存放数据的指针，才能真正取到数据，效率较低.



#### 6.B+树的性质

B树的变种，每一个节点是一个数据块。存放这多个数据。

与B树不同的是：

1. 每一个梯度节点，存在着上一层的冗余节点。
2. B树的数据与索引存放在每一个节点上的，但是B+树只有叶子节点存有数据
3. B+数据的叶子节点，具有单向指针。

mysql改进后的B+树:

1. B+树的叶子节点有双向指针





#### 7.创建索引的原则

1. 最左前缀匹配原则
2. 区分度不高的字段，尽量别建索引
3. 查询频繁的字段，尽量建索引。
4. 有外键的字段，一定要建索引。



#### 8.索引一定能提高查询性能吗？

通常，建立索引能都避开全表扫描，可以提高查询效率。

但是，建立索引之后，每次insert update delete都要维护更新索引，影响执行效率。需要额外的存储空间。

如果在insert update delete期间，发生select 很可能影响select的效率.



#### 9.如何对百万级别以上的数据，进行删除？

索引过大，会影响删除的效率。

因此：

1. 先删除索引。
2. 在删除百万级别的数据（此时没有索引树需要维护，因此速度非常快）
3. 重新构建索引(数据少了，建立索引非常容易)



#### 10.Hash索引 B+树的区别：

1. hash索引的数据结构是hash表，等值查询根据hash算法，直接在hash表中找到对应的位置。B+树则需要多路平衡去遍历节点。直到找到叶子节点位置的相应数据。如果是等值查询的话，那么确实hash索引优于B+树
2. 如果是范围查询，则hash索引就失去用处了，只能挨个遍历每一个元素，看是否满足范围，而B+树即使是范围查询，或者模糊查询依然能通过遍历节点，减少遍历次数。
3. 如果排序用到了索引字段，hash索引不能排序。B+树本身就是有序的，因此可以直接返回排序过后的数据。



#### 11.mysql为什么使用B+树，不用B树？

1. 如果是千万级别的数据的话，使用B树，节点 key-value并存。但是每个节点数据大小相同，为了能将千万级别的数据存储，可能有大量的节点和梯度。如果是B+树的话，只有叶子节点存放value,因此每一个节点能存储大量的key。因此非叶子节点数，和数的梯度都远远小于B树。4层B树就能存储千万级别的数据。梯度节点越小，那么IO次数越少。查询效率就越高。
2. B+树的叶子节点有指针，因此B+树在经过索引找到数据之后，很容易进行范围查找，和排序。B树做不到。
3. B+树的查询效率较稳定，每次查询都需要从根节点到叶子节点走到一遍。B树的话如果中途找到了，就可以直接返回。或者遍历到叶子节点。查询效率不稳定。



####12.聚簇索引，覆盖索引 什么时候不要回表查询？

使用聚簇索引可以直接定位到的数据。不需要回表。

如果查询的字段，刚好是在索引字段之内，那么不需要回表。



#### 13.为什么要注意联合索引的顺序？

mysql B+数据的联合索引 的建立顺序，是按照建立时的顺序排列的。先比较第一个字段的顺序，相同的话再比较第二个字段的顺序，再相同的话，比较第三个字段，依次类推。

因此在查询的时候，也会遵守这个原则。如果没有左边字段的话，那么右边的字段将会无法遍历。也就不会走索引。





#### 14.什么是脏读，幻读，不可重复读

脏读：(读未提交)  一个session正在修改一条数据，并未提交。另一个session读到了这个session修改的数据。这个session没有提交这条数据。导致当前session读到了错误的数据。

不可重复读:一个session正在读一条数据。另一个session修改了这条数据，并且提交了。导致当前session两次读取的数据不一致。

幻读：一个session正在读数据，另一个session添加了数据,并且提交了。导致当前session读到了此次session不存在的数据。





#### 15.按锁的力度划分，锁的分类？

1.表锁：锁住整个表.  myisam就是表锁.  innodb在用不了行锁的情况，会使用表锁。并发度低.锁的冲突高。

2.行锁: 锁住一行。并发读高。锁的冲突低。

  

#### 16.按锁的类别上分，锁的分类？

1. 共享锁：又叫读锁，读的时候，读锁允许多个session同时访问。
2. 排他锁：又叫写锁，写的时候，写锁只允许一个session。



#### 17.innodb 行锁 怎么实现的？

查询的话 select *  from table where 1=1 for update.

for update  会根据条件的索引来锁住这一行。如果没走索引的话，那么行锁将升级为表级锁。



#### 18.常见死锁的解决方法

1.尽量约定以相同的顺序访问锁资源，降低死锁的机会。

2.同一个事务中，尽可能做到依次锁定所有资源

3.对与经常发生死锁的业务部分，升级表级锁，避免死锁。



#### 19.乐观锁与悲观锁

1. 乐观锁：假设多用户并发事务不相互影响，每次提交事务会先检查是否有别的事务修改了本事务的相关数据，没有的话提交通过，有的话，回滚，返回失败。**主要实现：CAS算法，或这数据库版本号**
2. 悲观锁：事务的提交，直接加锁，如果加锁成功，占用，不让别的事务访问，失败的话，阻塞，等待获取锁进入。

区别：乐观锁并未加锁，效率高。但是如果并发量大的情况，会造成大量更新失败，浪费CPU的执行效率。

​           悲观锁直接加锁，效率低。如果并发量大的情况，也不会造成CPU频繁上升。

#### 20.char varchar区别

1. char:定长字符，不足的话，存储的时候后面添加空格补齐。超过的话，报错。占用的存储空间大，查询效率高，典型的空间换时间的做法。

2. varchar 可变字符。 不足的话，存储的时候后面也不会补齐。占用的存储空间小，存储查询的效率低。典型的时间换空间的做法

	**varchar(5) varchar(255)  存储相同的字符   硬盘存储空间相同 但是内存读取空间不一样 是按照指定的大小 分配内存空间的**



#### 21.mysql exist  in  子查询区别

exist子查询，子查询出来以后，把外表当做Loop循环匹配

in的话 内表，外表做连接 

子查询大的用exit 反之用in.



####22.