java 线程
1,三种 创建方式

线程join方法 让执行此方法的线程对象优先执行，其他线程进入堵塞状态,并且yield方法并不让其他等待的线程得到此线程的执行权
线程wait方法  让线程进入等待状态，并且会释放锁。notify会唤醒被wait的线程，但是notify并不会释放锁对象.

2,如何同步:
2,1 volatile 
底层MESI缓存一致性原理,保证可见性,指令有序性.

2.2 CAS compare and swap 
保证原子性,可见性，指令有序性  
当改变共享变量时，与自己的预期值(上一次修改后的值)做比较,符合则修改。否则则更新预期值,继续循环比较.
AtomicInteger AtomicLong
LongAddr 当并发非常大时,分为数组，每个数组单独进行自选锁操作，最后SUM累加得值。
问题：可能产生ABA问题 加入版本号解决. new AtomicStampReference(变量值,版本号);
问题：并发大时CPU负载高。影响性能.

2.3 synchronized 代码块 方法
并发数小的时候CAS自选锁,并发大的时候重量级锁.

wait() notify()  notifyAll()  notify()会唤醒进入wait等待队列池的随机一个线程

2.4 ReenTrantLock
可以完全替代synchronized
不同点: 可以设置公平锁,非公平锁
可以设置interrupt中断线程
可以设置tryLock(超时时间) 

condition.await()  condition.signal()  会唤醒进入指定等待队列池中的一个线程

2.5栅栏:
CountDownLatch CyclicBarrier  Phrase

cyclicBarrier

两种使用方式 

new CyclicBarrier(int size,Runnable barrierAction)当到达栅栏时，有最后一个进入栅栏的线程执行任务.

2.6交换:
Exchanger

2.7 重量级锁/轻量级锁   公平锁/非公平锁   共享锁/排他锁


2.8 LockSupport LockSupport的 PARK方法暂停一个线程  UNPARK方法解除一个线程的暂停。 UNPARK方法一个先于PARK方法运行。比较灵活。


3,同步底层原理:AQS

3.1 ReenTrantLock有一个内部类Syn    lock();方法调用Syn的acquire(1)方法  Syn继承AbstractSynchronizedQueue  调用AbstractSynchronizedQueue
的acquire方法   acquire方法中有两个方法判断:a,!tryAcquire()方法 b,acquireQueued（）方法 a为false未获得锁, b为true表示不用进入队列

3.2 tryAcquire(args)方法:来自于Syn自身的重写方法 ----->根据实现类的不同，有公平性锁的方法以及非公平性锁的方法

3.2.1 getState()方法获取volatile 1说明有人持有  0说明锁无线程持有  state的值(继承自AbstractSynchronizedQueue)

3.2.2 state为0进入hasQueuedPredecessors(),非公平性锁没有此判断,根据队列判断是否有资格尝试获取锁，
详情见 https://blog.csdn.net/weixin_38106322/article/details/107154961
3.2.2.1 如果hasQueuedPredecessors()(非公平锁不用放入队列，直接竞争)返回false 继续compareAndSetState() 设置state=state+1原子性操作，线程安全

3.2.3 setExclusiveOwnerThread 设置exclusiveOwnerThread属性为当前线程

3.2.4 如果state!=0,继续判断exclusiveOwnerThread属性是否是当前线程. 如果是则继续，保证锁的重入性. 设置state=state+1.

3.3acquireQueued(addWaiter(Node.EXCLUSIVE), arg))方法



4,ThreadLocal 原理实现 https://www.cnblogs.com/dennyzhangdd/p/7978455.html
4.1 new ThreadLocal();------- threadLocalHashCode------->nextHashCode 方法 取得hashCode码值+1 CAS锁

4.2get()方法
4.2.1如果当前线程的ThreadLocalMap为null 则setInitialValue（）设定初始Value为null
再一次判断 当前线程的ThreadLocalMap 是否为null 如果是 createMap() new ThreadLocalMap(当前ThreadLocal对象,null);
4.2.2 进入ThreadLocalMap构造方法后，初始化一个容量为16的Entry数组，将Entry[ThreadLocal当前的hashCode%15]=new Entry(当前Threadlocal对象,null);

4.2.3如果当前线程的ThreadLocalMap不为null 则map.getEntry(当前ThreadLocal对象) 获取Entry[ThreadLocal当前的hashCode%15]
4.2.4如果 Entry[ThreadLocal当前的hashCode%15]不为null 且里面的ThreadLocal等于当前ThreadLocal对象，则返回，
否则getEntryAfterMiss(当前ThreadLocal对象, ThreadLocal当前的hashCode%15, Entry[ThreadLocal当前的hashCode%15]);
4.2.5遍历当前线程ThreadLocalMap的Entry数组 若果e.get()==当前ThreadLocal对象则返回，否则

4.3 set()方法
4.3.1判断当前线程的ThreadLocalMap 是否为null 如果是 createMap() new ThreadLocalMap(当前ThreadLocal对象,null);
4.3.2进入ThreadLocalMap构造方法后，初始化一个容量为16的Entry数组，将Entry[ThreadLocal当前的hashCode%15]=new Entry(当前Threadlocal对象,null);
4.3.4如果不为null

总结 每个Thread维护自己独立的ThreadLocalMap   每个线程第一次调用ThreadLocal对象get()方法 都会在在当前线程初始化一个ThreadLocalMap ThreadLocalMap<ThreadLocal,null>
每个线程第一次调用set()方法，也会在当前线程初始化一个ThreadLocalMap<ThreadLocal,Value> 注意ThreadLocal是弱引用.



5,JAVA关于多线程的容器
1,List
1.1 ArrayList 线程不安全
1.2 LinkedList 线程不安全
1.3 Vector 线程安全
1.4 ConcurrentQueueList 线程安全  poll()方法判断 是否还存在元素，不存在返回null
1.5 CopyAndWriteList 读不加锁，写加锁 写的时候复制数组 写完将底层数组复制到新数组中去

2,Map
2.1 HashMap 线程不安全
2.2 TreeMap 线程不安全 有序
2.3 HashTable 线程安全
2.4 Collecton.synchronizedMap() 线程安全
2.5 CocurrentMap 线程安全
2.6 ConcurrentSkipListMap()线程安全 有序 跳表结构 查找元素相对较快.


3,Queue
add()方法，容量满时报错  offer()方法,容量满时返回false  peek()方法,返回不移除被取走的元素.  poll()返回移除被取走的元素，不存在返回null

3.1 非阻塞队列
3.1.1 ConcurrentLinkedQueue 无界队列

3.2 阻塞队列
put()容量满时，会阻塞当前线程。直至有剩余容量。 take()无元素时，会阻塞当前线程,直至有新的元素被添加进来.
3.2.1 ArrayListBlockingQueue  LinkedListBlockingQueue
3.2.2 DelayQueue 会根据元素对象的getDelay()  compareTo方法 的顺序返回元素》
3.2.3 SynchronizedQueue  队列容量为0 put()方法会一直阻塞当前线程，直至有别的线程添加一个元素，才会释放当前线程.
3.2.4 TransferQueue  put()方法同上， transfer()方法 也会阻塞当前线程，直至次元素被别的线程拿走时，才会释放当前线程.



4,Callable Future
4.1 Callable和Runnable一样,都定义线程的任务，但是Callable有返回值，会返回一个结果.但是Callable不能交给Thread运行，要交给ThreadPool或者FutureTask
4.2 Future可以接收Callable的返回值，调用它的get()方法会阻塞当前线程，直至有返回值.
4.3 FutureTask 继承了Future   Runnable 既可以传入Callable对象 也可以传入Runnable对象
可以直接交给Thread运行。并且调用它的get()方法会阻塞当前线程，并且可以获取线程放回值.



## 线程池

### 1.ThreadPoolExecutor

#### 1.线程池的常用方法

execute(Runnable task) 提交任务给线程池

submit(Collable task) 提交任务给线程池，并且可以返回结果

shutdown() 完成已提交的任务之后，包括队列中的任务，不再接收新的任务

shutDownNow() 停止正在运行的任务，也不执行队列中的任务，不再接收新的任务

isTerminated() 测试线程池内所有任务是否都已执行完毕

isShutDown()测试该线程池是否已被关闭



#### 2. 线程池的重要属性

ctl bitmap  高三位用来保存线程池的运行状态，后29位用来记录线程池的线程数量

```
AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));
```

countbit 就是32-3 就是29

runstateof 返回线程池的状态

workerCountof返回线程池的工作线程的数量

ctlof 获取运行状态和工作线程数量给的数值 也就是ctl

```
private static int runStateOf(int c)     { return c & ~CAPACITY; }
private static int workerCountOf(int c)  { return c & CAPACITY; }
private static int ctlOf(int rs, int wc) { return rs | wc; }
```



#### 3.线程池5种状态说明

1. RUNNING 111    负数

	线程池处于RUNNING状态，能够接收处理新的任务。

	线程池的初始化状态就是RUNNING

2. SHUTDOWN 000   

	线程池处于SHUTDOWN状态，不能接收新的任务，但会继续处理已添加的任务

	调用shutdown方法，线程池由RUNNING---->SHUTDOWN

3. STOP  001       

	线程池处于STOP状态，不再接收新的任务，也不会处理已添加的任务，会中断正在执行的任务

	调用shutdownNow方法，线程池由SHUTDOWN/RUNNING-------->STOP

4. TIDING 010      

	当线程池ctl记录的工作线程池数量为0的时候， 那么线程池变为TIDING状态。

	并且线程池会执行钩子函数 TERMINED方法 

	SHUTDOWN 状态 队列任务为空，正在执行的任务也处理完，变为TIDING

	STOP 任务中断，执行任务为空 变为TIDING

5. TERMINATED  011  

	线程池变为TIDING状态，执行完TIMINATED方法之后就会变为TERMINATED





#### 4.线程池源码

execute()方法

####1.workCount<corePoolsize 增加工作线程

如果执行的线程池创建的线程数量小于核心线程数的时候 执行addWork方法.这里如果添加线程数成功 直接返回，如果失败重新获取ctl的值

```java
if (workerCountOf(c) < corePoolSize) {
    if (addWorker(command, true))
        return;
    c = ctl.get();
}
```

#####a.addwork()方法

创建一个worker对象，里面包装了一个Thread 添加到workers set里面 并且 调用Thread.start方法

如果线程池状态处于不是RUNNING状态的话，继续判断

如果线程池状态 只要依次不满足以下3种任意一种 则对外返回false

1. 线程池状态是stop 或者tiding  terminated   直接返回false
2. 线程池状态为shutdown  firsttask 不为null   因为不接收新添加的任务，所以直接返回 false
3. 线程池状态为shutdown  firsttask 为null  队列为空  因为队列中已经没有任务了，不需要再添加线程了

```java 
int c = ctl.get();
            int rs = runStateOf(c);

            // Check if queue empty only if necessary.
            if (rs >= SHUTDOWN &&
                ! (rs == SHUTDOWN &&
                   firstTask == null &&
                   ! workQueue.isEmpty()))
                return false;
```





判断线程池数量是否大于 CAPACITY ,corePoolSize或者maxPoolSize .如果大于的话，对外返回false.

如果不大于 CAS增加工作线程数量，成功的话跳出循环。否则的话，重新从retry处重试。

```java 
  for (;;) {
                int wc = workerCountOf(c);
                if (wc >= CAPACITY ||
                    wc >= (core ? corePoolSize : maximumPoolSize))
                    return false;
                if (compareAndIncrementWorkerCount(c))
                    break retry;
                c = ctl.get();  // Re-read ctl
                if (runStateOf(c) != rs)
                    continue retry;
                // else CAS failed due to workerCount change; retry inner loop
            }
        }
```



CAS线程数量之后，创建worker包装对象，调用ThreadFactory创建一个线程放入。再上锁

<font color='red'>这里worker.thread实际上是自身引用，它自己也实现了Runnable接口，并且它的run方法里面有调用Runtask</font>

```java 
 Worker(Runnable firstTask) {
            setState(-1); // inhibit interrupts until runWorker
            this.firstTask = firstTask;
            this.thread = getThreadFactory().newThread(this);
        }
```



如果rs<SHUTDOWN 那么可以添加新的任务，可以添加worker

如果rs等于SHUTDOWN 并且firstTask为Null 说明此时是处理workerQueue里的线程的，所以也可以添加worker

把worker添加到worker  set集合当中,设置largestPoolSize（线程池中出现过的最大线程数）

之后解锁。

```java 
        boolean workerStarted = false;
        boolean workerAdded = false;
        Worker w = null;
        try {
            w = new Worker(firstTask);
            final Thread t = w.thread;
            if (t != null) {
                final ReentrantLock mainLock = this.mainLock;
                mainLock.lock();
                try {
                    // Recheck while holding lock.
                    // Back out on ThreadFactory failure or if
                    // shut down before lock acquired.
                    int rs = runStateOf(ctl.get());

                    if (rs < SHUTDOWN ||
                        (rs == SHUTDOWN && firstTask == null)) {
                        if (t.isAlive()) // precheck that t is startable
                            throw new IllegalThreadStateException();
                        workers.add(w);
                        int s = workers.size();
                        if (s > largestPoolSize)
                            largestPoolSize = s;
                        workerAdded = true;
                    }
                } finally {
                    mainLock.unlock();
                }
                if (workerAdded) {
                    t.start();
                    workerStarted = true;
                }
            }
        } finally {
            if (! workerStarted)
                addWorkerFailed(w);
        }
        return workerStarted;
    }
```

#####b,ThreadPoolExecutor.Worker 的run方法 

worker 继承AQS 实现了Runnable接口

task != null 或者

worker一旦run 就是死循环，只有跳出循环，线程才会被销毁。

(task = getTask()) != null  任务队列只用有任务的话 进入之后的task.run方法 ，把worker的firsttask置为null



```java 
 public void run() {
            runWorker(this);
        }
//===================================================
final void runWorker(Worker w) {
        Thread wt = Thread.currentThread();
        Runnable task = w.firstTask;
        w.firstTask = null;
        w.unlock(); // allow interrupts
        boolean completedAbruptly = true;
        try {
            while (task != null || (task = getTask()) != null) {
                w.lock();
                // If pool is stopping, ensure thread is interrupted;
                // if not, ensure thread is not interrupted.  This
                // requires a recheck in second case to deal with
                // shutdownNow race while clearing interrupt
                if ((runStateAtLeast(ctl.get(), STOP) ||
                     (Thread.interrupted() &&
                      runStateAtLeast(ctl.get(), STOP))) &&
                    !wt.isInterrupted())
                    wt.interrupt();
                try {
                    beforeExecute(wt, task);
                    Throwable thrown = null;
                    try {
                        task.run();
                    } catch (RuntimeException x) {
                        thrown = x; throw x;
                    } catch (Error x) {
                        thrown = x; throw x;
                    } catch (Throwable x) {
                        thrown = x; throw new Error(x);
                    } finally {
                        afterExecute(task, thrown);
                    }
                } finally {
                    task = null;
                    w.completedTasks++;
                    w.unlock();
                }
            }
            completedAbruptly = false;
        } finally {
            processWorkerExit(w, completedAbruptly);
        }
    }
```



work.lock()方法说明当前线程处于工作状态

###### Worker的interruptIdleWorkers方法

Work对象重写了tryAcquire()方法，实现了锁的不可重入。因此worker.lock是不可重入的锁。

如果 线程处于空闲状态，并且未被打断，那么此方法直接设置线程的打断标志为true.

```Java 
private void interruptIdleWorkers(boolean onlyOne) {
        final ReentrantLock mainLock = this.mainLock;
        mainLock.lock();
        try {
            for (Worker w : workers) {
                Thread t = w.thread;
                if (!t.isInterrupted() && w.tryLock()) {
                    try {
                        t.interrupt();
                    } catch (SecurityException ignore) {
                    } finally {
                        w.unlock();
                    }
                }
                if (onlyOne)
                    break;
            }
        } finally {
            mainLock.unlock();
        }
    }
```



如果线程池处于了STOP状态的话，那么把线程置为interrupt状态

如果线程池不是STOP状态，确保所有线程没有interrupt状态

```java 
if ((runStateAtLeast(ctl.get(), STOP) ||
                     (Thread.interrupted() &&
                      runStateAtLeast(ctl.get(), STOP))) &&
                    !wt.isInterrupted())
                    wt.interrupt();
```





##### c.getTask方法尝试从队列获取任务

rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty() 

线程池状态不为RUNNING 并且 线程池为STOP TIDING TERMINATED或者 工作队列为空 返回null

timed变量如果设置了允许核心线程超时，或者线程数量大于corePoolSize 也就是如果设置核心线程允许超时，那么非核心线程超时，就会跳出循环。剩余的线程会因为take()方法被阻塞，直至有新的任务到队列当中。

```java 
private Runnable getTask() {
        boolean timedOut = false; // Did the last poll() time out?

        for (;;) {
            int c = ctl.get();
            int rs = runStateOf(c);

            // Check if queue empty only if necessary.
            if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {
                decrementWorkerCount();
                return null;
            }

            int wc = workerCountOf(c);

            // Are workers subject to culling?
            boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;

            if ((wc > maximumPoolSize || (timed && timedOut))
                && (wc > 1 || workQueue.isEmpty())) {
                if (compareAndDecrementWorkerCount(c))
                    return null;
                continue;
            }

            
        }
    }
```

如果设置了校验超时 调用阻塞队列的poll方法 如果一定时间队列还没有任务的话，那么直接返回null ,并且设置timeout为true,下次循环之后会timed就为true

如果没有调用阻塞队列的take方法 ，此方法会一直阻塞到队列中有任务

```JAVA 
try {
                Runnable r = timed ?
                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :
                    workQueue.take();
                if (r != null)
                    return r;
                timedOut = true;
            } catch (InterruptedException retry) {
                timedOut = false;
            }
```



####d.获取task为null的话，跳出循环，执行processWorkerExit方法

// 如果completedAbruptly值为true，则说明线程执行时出现了异常，需要 将workerCount减1；

```Java 
  if (completedAbruptly) // If abrupt, then workerCount wasn't adjusted
            decrementWorkerCount();
```





```java 
//统计完成的任务数
10 completedTaskCount += w.completedTasks;
11 // 从workers中移除，也就表示着从线程池中移除了一个工作线程
12 workers.remove(w);
13 } finally {
14 mainLock.unlock();
15 }
16 // 根据线程池状态进行判断是否结束线程池
17 tryTerminate();

```







#### 2.Running&&workiingQueue.offer(Ruunable command) 把任务添加到队列。

这里如果线程池处于RUNNING状态的话，会把任务添加到队列。

成功的话，之后如果线程处于非RUNNING状态，并且从队列中移除任务成功的话，执行拒绝策略

```java 
   if (isRunning(c) && workQueue.offer(command)) { 
int recheck = ctl.get();
            if (! isRunning(recheck) && remove(command))
                reject(command);
```



成功的话，之后如果线程仍然是RUNNING状态的话，并且线程池中没有工作线程的话，那么添加一个线程。取队列取任务执行。

```java 
else if (workerCountOf(recheck) == 0)
                addWorker(null, false);
```





#### 3.addWorker(command, false) 添加非核心线程数

添加非核心线程数，如果添加失败的话，会进入reject 执行拒绝策略











##2.ScheduledThreadPoolExecutor

1. scheduleAtFixedRate

	判断是否过了period，如果过了循环执行，如果没有继续等待直到满足period

2. scheduleAtFixedRateWithDelay

​      等上一个任务执行完之后，等待DELAY 继续执行任务。







5,Executors  ExecutorService
5.1 Executors相当于ThreadPool的创建工厂，里面定义了一些JDK提供的ThreadPool
5.2 ExecutorService 所有线程池都要继承这个接口 里面的submit()方法 可以提交任务给线程池.

6,ThreadPool
coreSize活跃线程数
maxSize最大线程数
aliveTime除coreSize以外线程的存活时间   timeUnit 存活时间单位
Queue 线程池超过最大线程数量时 放入的容器
RejectPolicy拒绝策略 队列容量达到最大时，采取的解决方案
具体的拒绝策略有JDK提供的策略，或者自定义的策略
AbortRejectPolicy 达到最大时,抛出异常
DiscardRejectPolicy 达到最大时，放弃该任务。
DiscardOldestPolicy 达到最大时，放弃进入队列最早的任务
CallRunPolicy 达到最大时，将该任务交给任务的提交线程执行

6.1 SingledThreadPool
coreSize 1  maxSize 1 coreThread以外线程存活时间0   linkedBlockingQuue  无界队列（Integer.MAX_VALUE）

6.2 CachedThreadPool
coreSize 0 maxSize 无限制（Integer.MAX_VALUE)  coreThread以外线程存活时间60s SynchronousQueue 队列容量为0
只有队列有被take()请求后 才可以put()元素

6.3 FixedThreadPool
coreSize 自定义 maxSize自定义 coreThread以外线程存活时间0  无界队列

6.4 ScheduledThreadPool
coreSize 自定义 maxSize 无限制（Integer.MAX_VALUE）  coreThread以外线程存活时间0 DelayedWorkQueue
多少时间后执行  执行间隔  时间单位

6.5 ForkJobThreadPool
里面的任务对象继承RecursiveTask可以 实现分组任务，规定分组规则

6.6 WorkStealingThreadPool
线程池里多组队列。当一个满的队列有空间时会偷取其余满的队列的任务执行。




java线程池
使用 Executors中的静态方法即可创造thread pool 主要有以下三种：
方法名	功能
newFixedThreadPool(int nThreads)	
创建固定大小的线程池
创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待

newSingleThreadExecutor()	
创建只有一个线程的线程池


newCachedThreadPool()	
创建一个不限线程数上限的线程池，任何提交的任务都将立即执行
创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程
线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程

小程序使用这些快捷方法没什么问题，对于服务端需要长期运行的程序，创建线程池应该直接使用ThreadPoolExecutor的构造方法.

  构造方法参数详解:

  int corePoolSize, // 线程池长期维持的线程数，即使线程处于Idle状态，也不会回收。
  int maximumPoolSize, // 线程数的上限
  long keepAliveTime, TimeUnit unit, // 超过corePoolSize的线程的idle时长，
                                     // 超过这个时间，多余的线程会被回收。
  BlockingQueue<Runnable> workQueue, // 任务的排队队列
  ThreadFactory threadFactory, // 新线程的产生方式
  RejectedExecutionHandler handler) // 拒绝策略

注意：
corePoolSize和maximumPoolSize设置不当会影响效率，甚至耗尽线程；
workQueue设置不当容易导致OOM；
handler设置不当会导致提交任务时抛出异常。

线程池的工作顺序：
corePoolSize -> 任务队列 -> maximumPoolSize -> 拒绝策略

线程池三种提交任务的方式：
提交方式	是否关心返回结果
Future<T> submit(Callable<T> task)	是
void execute(Runnable command)	否
Future<?> submit(Runnable task)	否，虽然返回Future，但是其get()方法总是返回null


线程池的拒绝策略

拒绝策略	拒绝行为
AbortPolicy	抛出RejectedExecutionException
DiscardPolicy	什么也不做，直接忽略
DiscardOldestPolicy	丢弃执行队列中最老的任务，尝试为当前提交的任务腾出位置
CallerRunsPolicy	直接由提交任务者执行这个任务


// Java线程池的完整构造函数
public ThreadPoolExecutor(
  int corePoolSize, // 正式工数量
  int maximumPoolSize, // 工人数量上限，包括正式工和临时工
  long keepAliveTime, TimeUnit unit, // 临时工游手好闲的最长时间，超过这个时间将被解雇
  BlockingQueue<Runnable> workQueue, // 排期队列
  ThreadFactory threadFactory, // 招人渠道
  RejectedExecutionHandler handler) // 拒单方式



