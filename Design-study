# A.装饰者模式

1. 抽象接口 定义功能
2. 基本构建类，定义抽象接口的具体功能，每种功能不同
3. 装饰者，把具体装饰角色的委托给其他基本构建
4. 具体装饰角色接收基本构建类。并且拓展了一些别的功能



具体装饰角色可以集成其他基础构件的功能。





# B.门面模式

1.  具体功能类 具有一堆功能方法的类
2. 门面类  需要集成具体功能类的某些方法



门面类中定义方法，创建具体功能类对象，调用具体功能类对外暴露的方法。具有具体功能类的某些功能



### 3.使用实例

tomcat HttpServletRequest

用户操作的实际上是RequestFacade对象。 整个过程HttpServletRequest的某些方法收到保护。   

```java 
  public HttpServletRequest getRequest() {
        if (facade == null) {
            facade = new RequestFacade(this);
        } 
        return facade;
    }
```





# C模板模式

1. 抽象模板类 定义了模板方法，一般为final不允许子类 重写调用逻辑。但是某些具体的实现由子类完成
2. 实现子类   重写模板类希望子类实现的具体流程方法



定义抽象模板类，定义final模板方法，定义抽象需要子类实现的方法。定义子类重写模板类希望子类实现的方法.



### 3.使用实例

JUC  AQS框架 子类重写的  tryAcquire()  tryAcquireShared()  tryRelease()  tryReleasedShared()

AbstractSynchronizedQueue的  

acquire()--------->tryAcquire()  acquireQueued

acquireInterruptity()--------->tryAcquire()  doAcquireInterruptibly 



acquireShared()---------->tryAcquireShared()   doacquireShared()

acquireSharedInterruptity-------->tryAcquireShared()   doAcquireSharedInterruptibly()





release() ------->tryRelease()   

releaseShared()------->tryReleaseShared()  doReleaseShared()



独有的addWaiter()

enq()

hasQueueuedProcessor()





# D.适配器模式

### 1.目标角色

目标类



### 2.适配源



### 3.适配器

通过继承，类关联把目标角色转化为适配源角色



### 4.使用实例

目标类Advice:ThrowAdvice  BeforeAdvice

适配源 MethodBeforeIntercetpor   MethodAfterInterceptor 



# E.建造者模式

setA().setB().setC().setD()



# F.代理模式

spring aop

# G观察者模式

spring监听器 监听事件





# H.责任链模式

