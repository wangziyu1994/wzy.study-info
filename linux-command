## 1.netstat 查看端口占用情况详解

 -a或--all：显示所有连线中的Socket；
-A<网络类型>或--<网络类型>：列出该网络类型连线中的相关地址；
-c或--continuous：持续列出网络状态；
-C或--cache：显示路由器配置的快取信息；
-e或--extend：显示网络其他相关信息；
-F或--fib：显示FIB；
-g或--[groups](https://ywnz.com/linux/groups/)：显示多重广播功能群组组员名单；
-h或--[help](https://ywnz.com/linux/help/)：在线帮助；
-i或--interfaces：显示网络界面信息表单；
-l或--listening：显示监控中的服务器的Socket；
-M或--masquerade：显示伪装的网络连线；
-n或--numeric：直接使用ip地址，而不通过域名服务器；
-N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称；
-o或--timers：显示计时器；
-p或--programs：显示正在使用Socket的程序识别码和程序名称；
-r或--[route](https://ywnz.com/linux/route/)：显示Routing Table；
-s或--statistice：显示网络工作信息统计表；
-t或--tcp：显示TCP传输协议的连线状况；
-u或--udp：显示UDP传输协议的连线状况；
-v或--verbose：显示指令执行过程；
-V或--version：显示版本信息；
-w或--raw：显示RAW传输协议的连线状况；
-x或--unix：此参数的效果和指定"-A unix"参数相同；
--ip或--inet：此参数的效果和指定"-A inet"参数相同。 





## 2.lsof  list   open  files 列出所有打开的文件

lsof输出各列信息的意义如下：

COMMAND：进程的名称 PID：进程标识符

USER：进程所有者

FD：文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等 TYPE：文件类型，如DIR、REG等

DEVICE：指定磁盘的名称

SIZE：文件的大小

NODE：索引节点（文件在磁盘上的标识）

NAME：打开文件的确切名称



lsof abc.txt 显示开启文件abc.txt的进程
lsof -c abc 显示abc进程现在打开的文件
lsof -c -p 1234 列出进程号为1234的进程所打开的文件
lsof -g gid 显示归属gid的进程情况
lsof +d /usr/local/ 显示目录下被进程开启的文件
lsof +D /usr/local/ 同上，但是会搜索目录下的目录，时间较长
lsof -d 4 显示使用fd为4的进程
lsof -i 用以显示符合条件的进程情况

lsof -o 显示文件描述符的偏移量

lsof -i[46] [protocol][@hostname|hostaddr][:service|port]
  46 --> IPv4 or IPv6
  protocol --> TCP or UDP
  hostname --> Internet host name
  hostaddr --> IPv4地址
  service --> /etc/service中的 service name (可以不止一个)
  port --> 端口号 (可以不止一个)





## 3.exec  source   子shell

### 1.exec  [command]

父进程执行完毕,用父进程号开启新的进程，并且直接覆盖父进程的上下文。exec执行完不会在返回父进程。



### 2.source [ shell]

同一个进程下，上下文也相同，接着运行



### 3.子shell

父进程开启一个子线程。父子进程号不同，线程上下文也不同。 子进程执行完会返回父进程，接着执行.





##4.exec 文件描述符

可以将文件描述符映射成对应的文件

1. exec  10>some.txt

	10文件描述符的输出 会覆盖到some.txt中

2. exec 10<some.txt

​        10文件描述符的输入 会读取some.txt中

3. exec 10>>some.txt

	10文件描述符的输出 会追加到some.txt中



##5.read

Linux read命令用于从标准输入读取数值。

read 内部命令被用来从标准输入读取单行数据。这个命令可以用来读取键盘输入，当使用重定向的时候，可以读取文件中的一行数据.

**读取到换行符结束**



- a 后跟一个变量，该变量会被认为是个数组，然后给其赋值，默认是以空格为分割符。
- -d 后面跟一个标志符，其实只有其后的第一个字符有用，作为结束的标志。
- -p 后面跟提示信息，即在输入前打印提示信息。
- -e 在输入的时候可以使用命令补全功能。
- -n 后跟一个数字，定义输入文本的长度，很实用。
- -r 屏蔽\，如果没有该选项，则\作为一个转义字符，有的话 \就是个正常的字符了。
- -s 安静模式，在输入字符时不再屏幕上显示，例如login时输入密码。
- -t 后面跟秒数，定义输入字符的等待时间。
- -u 后面跟fd，从文件描述符中读入，该文件描述符可以是exec新开启的





## 6.{} 花括号拓展

{ echo "133";echo "1111"; }

1. 大括号里面两端空格，里面每个命令加分号。执行多条命令



##7. $$当前进程号 优先级高于管道。  $BASHPID 当前进程号 优先级小于管道







## 8.tcpdump 网络抓包

tcpdump -i eth0

-A 以ASCII格式打印出所有分组，并将链路层的头最小化。

-c 在收到指定的数量的分组后，tcpdump就会停止。

-C 在将一个原始分组写入文件之前，检查文件当前的大小是否超过了参数file_size 中指定的大小。如果超过了指定大小，则关闭当前文件，然后在打开一个新的文件。参数 file_size 的单位是兆字节（是1,000,000字节，而不是1,048,576字节）。

-d 将匹配信息包的代码以人们能够理解的汇编格式给出。

-dd 将匹配信息包的代码以c语言程序段的格式给出。

-ddd 将匹配信息包的代码以十进制的形式给出。

-D 打印出系统中所有可以用tcpdump截包的网络接口。

-e 在输出行打印出数据链路层的头部信息。

-E 用spi@ipaddr algo:secret解密那些以addr作为地址，并且包含了安全参数索引值spi的[IPsec](http://www.ha97.com/tag/ipsec) ESP分组。

-f 将外部的[Internet](http://www.ha97.com/tag/internet)地址以数字的形式打印出来。

-F 从指定的文件中读取表达式，忽略命令行中给出的表达式。

-i 指定监听的网络接口。

-l 使标准输出变为缓冲行形式，可以把数据导出到文件。

-L 列出网络接口的已知数据链路。

-m 从文件module中导入SMI MIB模块定义。该参数可以被使用多次，以导入多个MIB模块。

-M 如果tcp报文中存在TCP-MD5选项，则需要用secret作为共享的验证码用于验证TCP-MD5选选项摘要（详情可参考RFC 2385）。

-b 在数据-链路层上选择协议，包括ip、arp、rarp、ipx都是这一层的。

-n 不把网络地址转换成名字。

-nn 不进行端口名称的转换。

-N 不输出主机名中的域名部分。例如，‘nic.ddn.mil‘只输出’nic‘。

-t 在输出的每一行不打印时间戳。

-O 不运行分组分组匹配（packet-matching）代码优化程序。

-P 不将网络接口设置成混杂模式。

-q 快速输出。只输出较少的协议信息。

-r 从指定的文件中读取包(这些包一般通过-w选项产生)。

-S 将tcp的序列号以绝对值形式输出，而不是相对值。

-s 从每个分组中读取最开始的snaplen个字节，而不是默认的68个字节。

-T 将监听到的包直接解释为指定的类型的报文，常见的类型有rpc远程过程调用）和snmp（简单网络管理协议；）。

-t 不在每一行中输出时间戳。

-tt 在每一行中输出非格式化的时间戳。

-ttt 输出本行和前面一行之间的时间差。

-tttt 在每一行中输出由date处理的默认格式的时间戳。

-u 输出未解码的NFS句柄。

-v 输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息。

-vv 输出详细的报文信息。

-w 直接将分组写入文件中，而不是不分析并打印出来。







##10.strace



-p 跟踪指定的进程
-f 跟踪由fork子进程系统调用
-F 尝试跟踪vfork子进程系统调吸入，与-f同时出现时, vfork不被跟踪
-o filename 默认strace将结果输出到stdout。通过-o可以将输出写入到filename文件中
-ff 常与-o选项一起使用，不同进程(子进程)产生的系统调用输出到filename.PID文件
-r 打印每一个系统调用的相对时间
-t 在输出中的每一行前加上时间信息。 -tt 时间确定到微秒级。还可以使用-ttt打印相对时间
-v 输出所有系统调用。默认情况下，一些频繁调用的系统调用不会输出
-s 指定每一行输出字符串的长度,默认是32。文件名一直全部输出
-c 统计每种系统调用所执行的时间，调用次数，出错次数。
-e expr 输出过滤器，通过表达式，可以过滤出掉你不想要输出



**基本上完整的用法是这样：strace  -ff  -o /tmp/output2.txt  [command]



## 11.firewall-cmd 防火墙相关命令

1. 查看防火墙服务状态

systemctl  status firewalld.service

2. 关闭防火墙

systemctl stop firewalld.service

3. 禁用防火墙服务

systemctl disable firewalld.service

   4.firewall-cmd --zone=public --add-port=80/tcp --permanent  永久增加开放端口

5. firewall-cmd  --reload 重启防火墙

6. firewall-cmd --list-port 查看所有开放端口





##12.df   du  查看磁盘容量

###du查看文件夹大小

```bash 
-a或-all 显示目录中个别文件的大小。

-b或-bytes 显示目录或文件大小时，以byte为单位。

-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。

-D或--dereference-args 显示指定符号连接的源文件大小。

-h或--human-readable 以K，M，G为单位，提高信息的可读性。

-H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。

-k或--kilobytes 以1024 bytes为单位。

-l或--count-links 重复计算硬件连接的文件。

-L<符号连接>或--dereference<符号连接> 显示选项中所指定符号连接的源文件大小。

-m或--megabytes 以1MB为单位。

-s或--summarize 仅显示总计。

-S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小。

-x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。

-X<文件>或--exclude-from=<文件> 在<文件>指定目录或文件。

--exclude=<目录或文件> 略过指定的目录或文件。

--max-depth=<目录层数> 超过指定层数的目录后，予以忽略。

--help 显示帮助。

--version 显示版本信息。
```



###df查看磁盘分区大小 

```bash 
-a：--all，显示所有的文件系统，包括虚拟文件系统，参考示例2。
-B：--block-size，指定单位大小。比如1k，1m等，参考示例3。
-h：--human-readable，以人们易读的GB、MB、KB等格式显示，参考示例4。
-H：--si，和-h参数一样，但是不是以1024，而是1000，即1k=1000，而不是1k=1024。
-i：--inodes，不用硬盘容量，而是以inode的数量来显示，参考示例5。
-k：以KB的容量显示各文件系统，相当于--block-size=1k。
-m：以KB的容量显示各文件系统，相当于--block-size=1m。
-l：--local，只显示本地文件系统。
--no-sync：在统计使用信息之前不调用sync命令(默认)。
-sync：在统计使用信息之前调用sync命令。
-P：--portability，使用POSIX格式显示，参考示例6。
-t：--type=TYPE，只显示指定类型的文件系统，参考示例7。
-T：--print-type，显示文件系统类型，参考示例8。
-x：--exclude-type=TYPE，不显示指定类型的文件系统。
--help：显示帮助信息。
--version：显示版本信息。
```















linux
==========================linux开关机====================================
关机命令:
a,shutdown -h  + [关机时间] 正常关机
b,halt 关闭内存
c,init 0




#:root 系统超级管理员
$:普通用户













==========================vi/vim模式==========================
vim -R 只读模式
vim 命令模式 :set nu   :wq  :q!   /[pattern]   ?[pattern]  s/old words/new words/g 全局替换


===========================crontab基本任务模式================
*  *   *   *  *   分 时 日 月 星期 command

* 通配符
a-b a和b之间
a,b,c,d a或b或c或d
a/b 表示在a范围内 跳过b

============================ftp=================================
linux 文件换行符 /r/n
window 文件换行符 /n
binary模式 不改变文件的任何内容
ascii模式  识别不同的操作系统的换行模式 自动替换换行符。

==================================================================
echo -e 开启转义
echo -n 读取键盘输入
echo 

===============================
linux 中的局部变量、全局变量、shell 变量的总结
系统局部变量和全局变量
 一、变量分类
局部变量和环境变量，局部变量只适用于当前shell，而环境变量是全局的，它适用于所有当前shell以及其派生出来的任意子进程，有些变量是用户创建的，其他的则是专用的shell变量。
二、局部变量
局部变量的作用域被限定在创建它们的shell中。local函数可以用来创建局部变量，但仅限于函数内使用。局部变量可以通过简单的赋予它一个值或一个变量名来设置，用declare内置函数来设置，或者省略也可。
格式：
变量名=值
declare 变量名=值
以下来示范一个局部变量的例子：
[root@centos ~]# echo $$
8836
[root@centos ~]# round=world
[root@centos ~]# echo $round
world
[root@centos ~]# bash
[root@centos ~]# echo $$
8920
[root@centos ~]# echo $round
[root@centos ~]# exit
exit
[root@centos ~]# echo $$
8836
[root@centos ~]# echo $round
world
在上面的岩石中可以看出，当启动一个bash程序，相当于创建一个子shell后，round变在这个子shell中没有被赋值，exit退出子shell后，可以看到父shell中变量round仍有值。
三、环境变量
环境变量通常又称全局变量，以区别于局部变量，通常，环境变量应该大写，环境变量是已经用export内置命令导出的变量。子shell继承当前父shell的环境变量，并能一直传承下去，但是不可逆向传递。
格式：
export 变量=值
declare -x 变量=值
我们做个示范：
[root@centos ~]# export NAME=”yuan faxiang”
[root@centos ~]# echo $NAME
yuan faxiang
[root@centos ~]# echo $$
8836
[root@centos ~]# bash
[root@centos ~]# echo $$
8958
[root@centos ~]# echo $NAME
yuan faxiang
[root@centos ~]# declare -x NAME=”Arvin”
[root@centos ~]# echo $NAME
Arvin
[root@centos ~]# exit
exit
[root@centos ~]# echo $$
8836
[root@centos ~]# echo $NAME
yuan faxiang
上述例子中，父shell中定义的NAME环境变量传递到了子shell中，在子shell中定义的NAME环境变量没有被带到父shell中。
环境变量按生存周期可分为：
1. 永久的：需要修改配置文件，export变量永久生效。
2. 临时的：使用export命令行声明即可，变量在关闭shell时失效。
2.设置变量的三种方法
1) 在/etc/profile文件中添加变量【对所有用户生效(永久的)】
用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。
例如：编辑/etc/profile文件，添加CLASSPATH变量
# vi /etc/profile
export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib
注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。
2) 在用户目录下的.bash_profile文件中增加变量【对单一用户生效(永久的)】
用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。
例如：编辑guok用户目录(/home/guok)下的.bash_profile
$ vi /home/guok/.bash.profile
添加如下内容：
export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib
注：修改文件后要想马上生效还要运行$ source /home/guok/.bash_profile不然只能在下次重进此用户时生效。
3) 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】
在shell的命令行下直接使用[export变量名=变量值]定义变量，该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。

===========================linux 防火墙 端口设置================
1、firewall-cmd --zone=public --add-port=80/tcp --permanent  永久增加开放端口

2、firewall-cmd  --reload 重启防火墙

3、 firewall-cmd --list-port 查看所有开放端口

============================linux 查看系统配置======================
uname -a
============================linux 系统用户设置======================
useradd -g 设置组 -d 设置目录 -s 设置运行shell 
cat /etc/passwd 查看所有用户设置

============================linux awk==========================================
awk  -F [分隔符]  '{print $1}' 

============================linux 查询磁盘大小==========================================

du -sh 列出大小  排序 sort -h   



